/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import entidades.Persona;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author lautalb
 */
public class frmPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form frmPrincipal
     */
    public frmPrincipal() {
        initComponents();
        llenarTabla();
        ((JTextField) this.dcFecha.getDateEditor()).setEditable(false);
        this.setLocationRelativeTo(null);
        this.llenarCombo();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblNombre = new javax.swing.JLabel();
        lblApellido = new javax.swing.JLabel();
        dcFecha = new com.toedter.calendar.JDateChooser();
        lblFechaNacimiento = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        txtApellido = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbListado = new javax.swing.JTable();
        btnGuardar = new org.edisoncor.gui.button.ButtonAero();
        btnBorrar = new org.edisoncor.gui.button.ButtonAero();
        btnActualizar = new org.edisoncor.gui.button.ButtonAero();
        btnBuscar = new org.edisoncor.gui.button.ButtonAero();
        btnSalir = new org.edisoncor.gui.button.ButtonAction();
        btnListar = new org.edisoncor.gui.button.ButtonAero();
        cbOpciones = new javax.swing.JComboBox<>();
        txtBuscar = new javax.swing.JTextField();
        lblFondo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(51, 153, 255));
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblNombre.setText("Nombre:");
        getContentPane().add(lblNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, -1, -1));

        lblApellido.setText("Apellido:");
        getContentPane().add(lblApellido, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, -1, -1));

        dcFecha.setBackground(new java.awt.Color(204, 204, 204));
        getContentPane().add(dcFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 80, 118, -1));

        lblFechaNacimiento.setText("Fecha de nacimiento: ");
        getContentPane().add(lblFechaNacimiento, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, 110, 20));

        txtNombre.setBackground(new java.awt.Color(204, 204, 204));
        getContentPane().add(txtNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 20, 118, -1));

        txtApellido.setBackground(new java.awt.Color(204, 204, 204));
        getContentPane().add(txtApellido, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 50, 118, -1));

        tbListado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tbListado.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tbListado.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tbListado.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbListadoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbListado);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, 464, 247));

        btnGuardar.setBackground(new java.awt.Color(0, 153, 255));
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        getContentPane().add(btnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 410, -1, -1));

        btnBorrar.setBackground(new java.awt.Color(255, 51, 51));
        btnBorrar.setText("Borrar");
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });
        getContentPane().add(btnBorrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 410, 90, -1));

        btnActualizar.setBackground(new java.awt.Color(153, 255, 153));
        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });
        getContentPane().add(btnActualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 410, -1, -1));

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        getContentPane().add(btnBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 140, -1, -1));

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });
        getContentPane().add(btnSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 10, 70, 30));

        btnListar.setBackground(new java.awt.Color(255, 255, 153));
        btnListar.setText("Listar");
        btnListar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarActionPerformed(evt);
            }
        });
        getContentPane().add(btnListar, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 410, 100, -1));

        cbOpciones.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        getContentPane().add(cbOpciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 140, 90, -1));
        getContentPane().add(txtBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 190, 180, -1));

        lblFondo.setIcon(new javax.swing.ImageIcon("C:\\Users\\Lautaro\\Documents\\NetBeansProjects\\gestionHibernate\\fondo.jpg")); // NOI18N
        getContentPane().add(lblFondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 690, 470));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        try {
            if ((txtNombre.getText().equals("")) || (txtApellido.getText().equals("")) || (dcFecha.getDate() == null)) {
                JOptionPane.showMessageDialog(null, "Por favor rellene los campos");
            } else {
                Persona p = new Persona();
                p.setId(0);
                p.setNombre(txtNombre.getText());
                p.setApellido(txtApellido.getText());
                p.setFechaNacimiento(dcFecha.getDate());
                Persona.guardar(p);
                this.llenarTabla();
                JOptionPane.showMessageDialog(null, "Se guardo con exito");
                this.limpiarCampos();
            }

        } catch (Exception e) {
            System.out.println("Error: " + e.toString());
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarActionPerformed
        if (tbListado.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "Debe elegir una fila primero");
        } else {
            DefaultTableModel modelo = (DefaultTableModel) tbListado.getModel();
            Persona p = new Persona();
            p.setId(Integer.parseInt(modelo.getValueAt(tbListado.getSelectedRow(), 0).toString()));
            p.setNombre(modelo.getValueAt(tbListado.getSelectedRow(), 1).toString());
            p.setApellido(modelo.getValueAt(tbListado.getSelectedRow(), 1).toString());
            SimpleDateFormat d = new SimpleDateFormat("yyyy-MM-dd");
            try {
                Date date = d.parse(modelo.getValueAt(tbListado.getSelectedRow(), 3).toString());

                SimpleDateFormat formateador = new SimpleDateFormat("dd-MM-yyyy");
                //System.out.println("Fecha: " + formateador.format(date));
                p.setFechaNacimiento(date);
            } catch (Exception e) {
                System.out.println("Error al parsear la fecha: " + e.toString());
            }

            try {
                Persona.eliminar(p);
                JOptionPane.showMessageDialog(null, "La persona con el ID: " + p.getId() + " fue eliminado con exito");
                this.llenarTabla();
                this.limpiarCampos();

            } catch (Exception e) {
                System.out.println("Error al eliminar: " + e.toString());
            }
        }

    }//GEN-LAST:event_btnBorrarActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnSalirActionPerformed

    private void tbListadoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbListadoMouseClicked
        if (tbListado.getSelectedRow() == -1) {

        } else {
            DefaultTableModel modelo = (DefaultTableModel) tbListado.getModel();

            txtNombre.setText((modelo.getValueAt(tbListado.getSelectedRow(), 1)).toString());
            txtApellido.setText((modelo.getValueAt(tbListado.getSelectedRow(), 2)).toString());
            SimpleDateFormat d = new SimpleDateFormat("yyyy-MM-dd");
            try {
                Date date = d.parse(modelo.getValueAt(tbListado.getSelectedRow(), 3).toString());

                SimpleDateFormat formateador = new SimpleDateFormat("dd-MM-yyyy");
                //System.out.println("Fecha: " + formateador.format(date));
                dcFecha.setDate(date);
            } catch (Exception e) {
                System.out.println("Error al parsear la fecha: " + e.toString());
            }

        }


    }//GEN-LAST:event_tbListadoMouseClicked

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        if (tbListado.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "Primero seleccione una fila");
        } else {
            try {
                if ((txtNombre.getText().equals("")) || (txtApellido.getText().equals("")) || (dcFecha.getDate() == null)) {
                    JOptionPane.showMessageDialog(null, "Por favor rellene los campos");
                } else {
                    DefaultTableModel modelo = (DefaultTableModel) tbListado.getModel();
                    Persona p = new Persona();
                    p.setId(Integer.parseInt(modelo.getValueAt(tbListado.getSelectedRow(), 0).toString()));
                    p.setNombre(txtNombre.getText());
                    p.setApellido(txtApellido.getText());
                    p.setFechaNacimiento(dcFecha.getDate());

                    Persona.actualizar(p);
                    JOptionPane.showMessageDialog(null, "Los datos fueron actualizados");
                    this.llenarTabla();
                    this.limpiarCampos();
                }
            } catch (Exception e) {
            }
        }
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarActionPerformed
        try {
            this.llenarTabla();
        } catch (Exception e) {
            System.out.println("Error al llenar la tabla: " + e.toString());
        }
    }//GEN-LAST:event_btnListarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed

        if (txtBuscar.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Rellene primero el campo");
        } else {
            DefaultTableModel modelo = new DefaultTableModel();
            tbListado.setModel(modelo);
            modelo.addColumn("ID");
            modelo.addColumn("Nombre");
            modelo.addColumn("Apellido");
            modelo.addColumn("Fecha de nacimiento");

            String opcion = cbOpciones.getSelectedItem().toString();
            // System.out.println("Opcion elegida: " + opcion);
            String dato = txtBuscar.getText();

            ArrayList<Persona> lista = (ArrayList<Persona>) Persona.buscar(opcion.toLowerCase(), dato);
            Iterator iter = lista.iterator();
            Object[] columnas = new Object[4];
            try {
                while (iter.hasNext()) {
                    Persona p = (Persona) iter.next();
                    columnas[0] = p.getId();
                    columnas[1] = p.getNombre();
                    columnas[2] = p.getApellido();
                    columnas[3] = p.getFechaNacimiento();
                    modelo.addRow(columnas);
                }
                txtBuscar.setText("");
            } catch (Exception e) {
                System.out.println("Error al buscar: " + e.toString());
            }
            
           
        }


    }//GEN-LAST:event_btnBuscarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmPrincipal().setVisible(true);
            }
        });
    }

    public void llenarCombo() {
        cbOpciones.removeAllItems();
        cbOpciones.addItem("ID");
        cbOpciones.addItem("Nombre");
        cbOpciones.addItem("Apellido");
    }

    public void llenarTabla() {
        DefaultTableModel modelo = new DefaultTableModel();
        tbListado.setModel(modelo);
        modelo.addColumn("ID");
        modelo.addColumn("Nombre");
        modelo.addColumn("Apellido");
        modelo.addColumn("Fecha de nacimiento");

        ArrayList<Persona> lista = (ArrayList<Persona>) Persona.listar();
        Iterator iter = lista.iterator();
        Object[] columnas = new Object[4];
        try {
            while (iter.hasNext()) {
                Persona p = (Persona) iter.next();
                columnas[0] = p.getId();
                columnas[1] = p.getNombre();
                columnas[2] = p.getApellido();
                columnas[3] = p.getFechaNacimiento();
                modelo.addRow(columnas);
            }
        } catch (Exception e) {
            System.out.println("Error al llenar tabla: " + e.toString());
        }

    }

    public void limpiarCampos() {
        txtNombre.setText("");
        txtApellido.setText("");
        dcFecha.setCalendar(null);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.edisoncor.gui.button.ButtonAero btnActualizar;
    private org.edisoncor.gui.button.ButtonAero btnBorrar;
    private org.edisoncor.gui.button.ButtonAero btnBuscar;
    private org.edisoncor.gui.button.ButtonAero btnGuardar;
    private org.edisoncor.gui.button.ButtonAero btnListar;
    private org.edisoncor.gui.button.ButtonAction btnSalir;
    private javax.swing.JComboBox<String> cbOpciones;
    private com.toedter.calendar.JDateChooser dcFecha;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblApellido;
    private javax.swing.JLabel lblFechaNacimiento;
    private javax.swing.JLabel lblFondo;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JTable tbListado;
    private javax.swing.JTextField txtApellido;
    private javax.swing.JTextField txtBuscar;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
}
